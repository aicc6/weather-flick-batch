# Weather-Flick-Batch Team Configuration

## 프로젝트 개요
Weather Flick 배치 시스템은 날씨 데이터와 관광지 정보를 수집, 처리하는 Python 기반 배치 처리 시스템입니다.

## 코딩 스타일 가이드

### Python 스타일
- **코드 포매팅**: Black (line-length=88)
- **임포트 정렬**: isort
- **린트**: flake8, pylint
- **타입 힌트**: 모든 함수와 메서드에 타입 힌트 사용 (typing 모듈 활용)
- **독스트링**: Google 스타일 독스트링 사용

```python
def process_weather_data(
    region_name: str, 
    start_date: datetime, 
    end_date: datetime
) -> List[Dict[str, Any]]:
    """날씨 데이터를 처리합니다.
    
    Args:
        region_name: 처리할 지역명
        start_date: 시작 날짜
        end_date: 종료 날짜
        
    Returns:
        처리된 날씨 데이터 리스트
        
    Raises:
        ValueError: 잘못된 날짜 범위일 때
    """
    pass
```

### 파일 구조 컨벤션
- **모듈명**: snake_case (예: `weather_collector.py`)
- **클래스명**: PascalCase (예: `WeatherDataCollector`)
- **함수/변수명**: snake_case (예: `get_weather_data`)
- **상수명**: UPPER_SNAKE_CASE (예: `API_BASE_URL`)

### 아키텍처 원칙

#### 1. 3-Layer 데이터 아키텍처
```
Raw Data Layer (원본 데이터)
├── api_raw_data 테이블
├── 파일 시스템 백업 (data/raw/)
└── 메타데이터 추적

Processed Data Layer (처리된 데이터)  
├── 기존 비즈니스 테이블들
├── 데이터 변환 및 검증
└── 품질 점수 관리

Business Data Layer (비즈니스 데이터)
├── 추천 점수 계산
├── 집계 데이터
└── 보고서 데이터
```

#### 2. API 클라이언트 설계
- **UnifiedAPIClient**: 모든 외부 API 호출 통합
- **다중 API 키 지원**: 자동 로테이션 및 할당량 관리
- **에러 핸들링**: 재시도 로직 및 우아한 실패 처리
- **캐싱**: Redis 기반 응답 캐싱

#### 3. 배치 작업 구조
```python
class BaseBatchJob:
    """모든 배치 작업의 기본 클래스"""
    
    def __init__(self, config: BatchJobConfig):
        self.config = config
        self.logger = get_logger(self.__class__.__name__)
    
    async def execute(self) -> bool:
        """작업 실행 메인 메서드"""
        pass
    
    def _validate_preconditions(self) -> bool:
        """사전 조건 검증"""
        pass
    
    def _cleanup(self):
        """정리 작업"""
        pass
```

### 데이터베이스 규칙

#### 테이블 명명 규칙
- **snake_case** 사용
- **복수형** 사용 (예: `tourist_attractions`, `weather_forecasts`)
- **의미 있는 이름** 사용

#### 컬럼 명명 규칙
- **snake_case** 사용
- **ID 컬럼**: `{table_name}_id` (예: `attraction_id`)
- **타임스탬프**: `created_at`, `updated_at`
- **외래키**: `{reference_table}_id`

#### 마이그레이션 규칙
- **순차적 번호**: `001_`, `002_` 등
- **의미 있는 이름**: `001_create_raw_data_tables.sql`
- **롤백 지원**: 각 마이그레이션에 롤백 스크립트 포함

### 로깅 및 모니터링

#### 로그 레벨 사용
- **DEBUG**: 상세한 디버깅 정보
- **INFO**: 일반적인 프로세스 정보
- **WARNING**: 주의가 필요한 상황
- **ERROR**: 오류 상황
- **CRITICAL**: 시스템 중단을 야기할 수 있는 심각한 오류

#### 로그 포맷
```python
logger.info(
    f"API 호출 완료: {provider.value}, "
    f"엔드포인트: {endpoint}, "
    f"응답시간: {duration:.3f}초, "
    f"데이터 크기: {len(response_data)}"
)
```

### 환경 설정

#### 필수 환경 변수
```bash
# API 키들
KTO_API_KEY=한국관광공사_API_키
KMA_API_KEY=기상청_API_키

# 데이터베이스
DATABASE_URL=postgresql://user:pass@host:port/db
POSTGRES_DB=weather_flick
POSTGRES_USER=user
POSTGRES_PASSWORD=password

# Redis (선택사항)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# 로깅
LOG_LEVEL=INFO
LOG_FILE_MAX_SIZE=10485760
LOG_FILE_BACKUP_COUNT=5
```

### 테스트 가이드

#### 테스트 구조
```
tests/
├── unit/           # 단위 테스트
├── integration/    # 통합 테스트
└── conftest.py     # pytest 설정
```

#### 테스트 명명 규칙
- **test_** 접두사 사용
- **의미 있는 이름**: `test_weather_data_collection_success`
- **예외 케이스**: `test_api_failure_handling`

#### 모킹 가이드
```python
@pytest.fixture
def mock_api_response():
    """API 응답 모킹"""
    return {
        "response": {
            "header": {"resultCode": "00"},
            "body": {"items": {"item": []}}
        }
    }

@patch('app.core.unified_api_client.aiohttp.ClientSession.get')
async def test_api_call(mock_get, mock_api_response):
    mock_get.return_value.__aenter__.return_value.json = AsyncMock(
        return_value=mock_api_response
    )
    # 테스트 로직
```

### 성능 최적화 가이드

#### 데이터베이스 최적화
- **벌크 인서트** 사용: `INSERT INTO ... VALUES (...), (...), ...`
- **인덱스 활용**: 자주 조회되는 컬럼에 인덱스 생성
- **페이지네이션**: 대량 데이터 처리 시 청크 단위로 처리

#### API 호출 최적화
- **비동기 처리**: aiohttp 사용하여 동시 API 호출
- **레이트 리미팅**: API 제공자 제한 준수
- **캐싱**: Redis를 활용한 응답 캐싱

#### 메모리 관리
- **제너레이터 사용**: 대량 데이터 처리 시 메모리 효율성
- **적절한 배치 크기**: 1000-5000 레코드 단위 처리

### 보안 가이드

#### API 키 관리
- **환경 변수**: 코드에 하드코딩 금지
- **다중 키 지원**: 할당량 초과 시 자동 로테이션
- **키 검증**: 시작 시 키 유효성 검증

#### 데이터 보안
- **SQL 인젝션 방지**: 파라미터화된 쿼리 사용
- **입력 검증**: 모든 외부 입력 검증
- **로깅 주의**: 민감한 정보 로그 출력 금지

### 배포 및 운영

#### 배치 작업 실행
```bash
# 개별 작업 실행
python run_manual_batch.py run comprehensive-tourism

# 전체 작업 실행
python run_manual_batch.py run-all

# 상태 확인
python run_manual_batch.py status
```

#### 모니터링 체크리스트
- [ ] API 키 사용량 확인
- [ ] 데이터베이스 연결 상태
- [ ] 로그 파일 크기 및 로테이션
- [ ] 디스크 공간 사용량
- [ ] 배치 작업 실행 상태

### 문제 해결 가이드

#### 일반적인 문제들
1. **API 응답 없음**: 키 유효성 및 할당량 확인
2. **데이터베이스 연결 실패**: 연결 문자열 및 네트워크 확인
3. **메모리 부족**: 배치 크기 조정 및 메모리 사용량 모니터링
4. **로그 파일 큰 용량**: 로그 레벨 조정 및 로테이션 설정

#### 디버깅 도구
- **로그 분석**: `tail -f logs/weather_flick_batch_*.log`
- **API 테스트**: `python run_manual_batch.py test`
- **데이터베이스 확인**: PostgreSQL 클라이언트 도구 사용

### 코드 리뷰 체크리스트

#### 필수 확인 사항
- [ ] 타입 힌트가 모든 함수에 적용되었는가?
- [ ] 독스트링이 Google 스타일로 작성되었는가?
- [ ] 에러 핸들링이 적절히 구현되었는가?
- [ ] 로깅이 적절한 레벨로 구현되었는가?
- [ ] 테스트 케이스가 포함되었는가?
- [ ] 환경 변수나 하드코딩된 설정이 있는가?

#### 성능 확인 사항
- [ ] 대량 데이터 처리 시 메모리 효율적인가?
- [ ] API 호출이 비동기로 구현되었는가?
- [ ] 데이터베이스 쿼리가 최적화되었는가?
- [ ] 불필요한 반복 계산이 있는가?

이 가이드를 따라 일관된 코드 품질과 아키텍처를 유지해주세요.